[{"content":"This guide documents the process of securely binding a Samba 4 Active Directory (AD) server to Authentik using LDAPS. The integration allows Authentik to use the AD as an identity source, enabling centralized authentication across applications via SAML/OIDC while Samba 4 maintains the authoritative user directory.\nOverview Samba 4 AD acts as the LDAP and Kerberos provider.\nAuthentik serves as the Identity Provider (IdP) using the LDAP source for authentication.\nLDAPS is used to securely transmit credentials between Authentik and Samba.\nPrerequisites A working Samba 4 Active Directory Domain Controller\nA running Authentik instance (Docker or native)\nDNS resolution and time synchronization between the two systems\nSamba server with LDAPS enabled and a trusted certificate\nStep 1: Enable LDAPS on Samba 4 Generate an internal CA and a server certificate for Samba: # Generate internal CA openssl genrsa -out ca.key 4096 openssl req -x509 -new -nodes -key ca.key -sha256 -days 3650 -out ca.crt # Generate Samba key and CSR openssl genrsa -out samba.key 4096 openssl req -new -key samba.key -out samba.csr # Sign server certificate openssl x509 -req -in samba.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out samba.crt -days 825 -sha256 Update /etc/samba/smb.conf: tls enabled = yes tls keyfile = /etc/samba/ssl/samba.key tls certfile = /etc/samba/ssl/samba.crt tls cafile = /etc/samba/ssl/ca.crt Restart Samba: systemctl restart samba-ad-dc Test LDAPS: openssl s_client -connect \u0026lt;samba_fqdn\u0026gt;:636 -CAfile ca.crt Step 2: Create a Bind User in Samba Create a service account in AD for Authentik to bind:\nsamba-tool user create authentik-bind Assign a strong password and note the DN (e.g., CN=authentik-bind,CN=Users,DC=example,DC=lan).\nStep 3: Upload CA to Authentik Navigate to Certificates in the Authentik admin UI.\nCreate a new certificate and upload your ca.crt.\nName it appropriately (e.g., Internal AD CA).\nStep 4: Configure LDAP Source in Authentik Go to Directory \u0026gt; LDAP Sources \u0026gt; Create.\nFill in the fields:\nServer URI: ldaps://\u0026lt;samba_fqdn\u0026gt;\nTLS Verification Certificate: Select your uploaded CA cert\nBind CN: Full DN of the bind user\nBind Password: The service account password\nBase DN: DC=example,DC=lan\nUser Object Filter: (objectClass=person)\nGroup Object Filter: (objectClass=group)\nGroup Membership Field: member\nObject Uniqueness Field: objectSid\nSelect appropriate user/group property mappings (default Active Directory mappings are recommended).\nSave and test the connection.\nStep 5: Add LDAP Source to Authentication Flow Go to Flows \u0026gt; default-authentication-flow \u0026gt; Edit.\nAdd a new Source (Login) stage.\nSelect your Samba 4 LDAP source.\nSave the flow.\nStep 6: Sync Users Navigate to Directory \u0026gt; LDAP Source.\nClick Manual Sync to import users.\nUsers should appear under Users, with their DN, UPN, and objectSid attributes visible.\nNotes Authentik does not write back to Samba AD. Any changes to user details in Authentik are local and will be overwritten on sync.\nAlways secure LDAPS using a trusted internal CA or public CA to prevent man-in-the-middle attacks.\nSyncs can be scheduled or triggered manually depending on your directory update policies.\nOutcome With this setup, Authentik now authenticates users against Samba 4 AD using secure LDAPS. Authentik remains the central SSO provider for web applications, while Samba manages users and groups.\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/integrating-samba-4-active-directory-with-authentik-via-ldaps/","summary":"\u003cp\u003eThis guide documents the process of securely binding a Samba 4 Active Directory (AD) server to Authentik using LDAPS. The integration allows Authentik to use the AD as an identity source, enabling centralized authentication across applications via SAML/OIDC while Samba 4 maintains the authoritative user directory.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSamba 4 AD\u003c/strong\u003e acts as the LDAP and Kerberos provider.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAuthentik\u003c/strong\u003e serves as the Identity Provider (IdP) using the LDAP source for authentication.\u003c/p\u003e","title":"Integrating Samba 4 Active Directory with Authentik via LDAPS"},{"content":"This guide documents the step-by-step process used to provision an Authentik identity provider server on a self-hosted Ubuntu Server using Docker and Docker Compose. This setup is suitable for advanced home lab environments and follows production-grade containerization practices.\nPrerequisites A fresh or existing Ubuntu 22.04 or 24.04 LTS server. sudo privileges on the system. Static IP and DNS configuration recommended. System updates applied. Step 1: Install Docker Engine Follow the official Docker post-install guide to install and configure Docker for non-root use:\nReference: Docker Post-install Guide\n# Update and install required packages sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y sudo apt install -y ca-certificates curl gnupg # Add Docker\u0026#39;s official GPG key sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\ | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg # Add the Docker repository echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \\ https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null # Install Docker Engine sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin # Optional: Add your user to the docker group to avoid using sudo with every docker command sudo usermod -aG docker $USER newgrp docker Step 2: Install Docker Compose (Standalone) Authentik uses docker-compose.yml to manage multi-container services.\nReference: Docker Compose Install Guide\n# Download Docker Compose binary sudo curl -L \u0026#34;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\u0026#34; \\ -o /usr/local/bin/docker-compose # Set permissions sudo chmod +x /usr/local/bin/docker-compose # Verify installation docker-compose version Step 3: Create Authentik Directory and Configuration Reference: Authentik Docker Install Guide\n# Create and navigate to the installation directory mkdir -p ~/authentik cd ~/authentik #Download the official docker-compose.yml curl -o docker-compose.yml https://goauthentik.io/docker-compose.yml #Create an .env file to override confiugration values cat \u0026lt;\u0026lt;EOF \u0026gt; .env AUTHENTIK_SECRET_KEY=$(openssl rand -hex 32) POSTGRES_PASSWORD=$(openssl rand -hex 16) AUTHENTIK_EMAIL__FROM=\u0026#34;admin@example.com\u0026#34; AUTHENTIK_EMAIL__HOST=\u0026#34;localhost\u0026#34; EOF Step 4: Start Authentik Services Start the containers using Docker Compose:\ndocker-compose pull # Pull latest images docker-compose up -d # Start in detached mode Step 5: Access Web Interface Once running, access Authentik at:\nhttp://\u0026lt;your-server-ip\u0026gt;:9000\ror\rhttps://\u0026lt;your-server-ip\u0026gt;:9443 Step 6: Initial Setup Wizard I had some trouble getting the initial setup wizard for Authentik to cooperate with me. The wizard would not let me setup the default akdmin account on a http connection. To resolve this issue do the following:\nBe sure that the docker container for authentik-server is listening on port 9443:\nsudo ss -tulpn | grep LISTEN Access the initial setup wizard using the link below:\nhttps://\u0026lt;your server\u0026#39;s IP or hostname\u0026gt;:9443/if/flow/initial-setup/ Related Posts ([[Provisioning Samba Active Directory Domain Controller and Windows Domain Integration]]) [[Integrating Samba 4 Active Directory with Authentik via LDAPS]]\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/provisioning-authentik-for-sso-on-a-self-hosted-ubuntu-server-docker-based/","summary":"\u003cp\u003eThis guide documents the step-by-step process used to provision an \u003ca href=\"https://goauthentik.io\"\u003eAuthentik\u003c/a\u003e identity provider server on a self-hosted Ubuntu Server using Docker and Docker Compose. This setup is suitable for advanced home lab environments and follows production-grade containerization practices.\u003c/p\u003e\n\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eA fresh or existing Ubuntu 22.04 or 24.04 LTS server.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esudo\u003c/code\u003e privileges on the system.\u003c/li\u003e\n\u003cli\u003eStatic IP and DNS configuration recommended.\u003c/li\u003e\n\u003cli\u003eSystem updates applied.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"step-1-install-docker-engine\"\u003eStep 1: Install Docker Engine\u003c/h2\u003e\n\u003cp\u003eFollow the official Docker post-install guide to install and configure Docker for non-root use:\u003c/p\u003e","title":"Provisioning Authentik for SSO on a Self-Hosted Ubuntu Server (Docker-Based)"},{"content":"1. Server Preparation OS: Ubuntu Server 24.04.2 LTS\nInitial Setup:\nStatic IP address manually configured\nIP: 172.30.30.30/24\nGateway: 172.30.30.1\nDNS (initially): 172.21.21.21 (Pi-hole)\nInstalled basic utilities (OpenSSH, networking tools)\n2. Samba Installation and Configuration Installation Commands:\nsudo apt update sudo apt full-upgrade sudo apt install samba krb5-config krb5-user winbind smbclient Service Management:\nDisabled default Samba services to prepare for AD DC mode:\nsudo systemctl disable smbd nmbd winbind sudo systemctl stop smbd nmbd winbind Provision Domain Controller:\nsudo samba-tool domain provision --use-rfc2307 --interactive Realm: TILLYNET.LAN\nDomain: TILLYNET\nServer Role: Domain Controller (DC)\nDNS Backend: SAMBA_INTERNAL\nDNS Forwarder: Initially pointed to Pi-hole (172.21.21.21)\nPost-Provision:\nSamba auto-generated clean /etc/samba/smb.conf. 3. Troubleshooting During Provisioning Provisioning Error: Existing smb.conf:\nDeleted pre-existing /etc/samba/smb.conf before reprovisioning. DNS Conflict with systemd-resolved:\nOverwrote /etc/resolv.conf to manually point to 127.0.0.1. Kerberos KDC Lookup Failure:\nEncountered \u0026ldquo;Cannot find KDC\u0026rdquo; errors until DNS pointed correctly. DNS Port 53 Not Listening Initially:\nRestarted samba-ad-dc to bind correctly. Benign DNS Update Errors (Exit Code 29):\nIgnored initial race conditions during service startup. SRV Record Lookup Failure:\nSRV records appeared correctly after service stabilization. No **dns forwarder** Command:\nConfirmed that DNS forwarder must be set during domain provision. 4. Kerberos Configuration Kerberos File Setup: /etc/krb5.conf overwritten with minimal:\n[libdefaults] default_realm = TILLYNET.LAN dns_lookup_realm = false dns_lookup_kdc = true 5. DNS Forwarding and Testing DNS Forwarding:\nSet during provisioning; no samba-tool command available post-provision. DNS Functionality Testing:\ndig @127.0.0.1 google.com host -t SRV _kerberos._udp.tillynet.lan samba-tool dns query 127.0.0.1 tillynet.lan @ ALL Confirmed correct A records and SRV records.\n6. Windows Client Domain Join Windows Version: Windows 11 Pro\nActions:\nConfigured PC to use Samba server as DNS.\nJoined to domain TILLYNET.LAN via System Properties.\nCreated new domain administrative account tillyadmin.\n7. Profile Migration Tool Used: ForensIT User Profile Wizard (Community Edition)\nAction: Migrated old local user profile to domain user (tillyadmin).\nOutcome:\nFiles migrated\nSome environmental conflicts detected (e.g., SSH agent issues, mismatched user folders)\n8. Git and SSH Environment Setup Challenges:\nSSH agent issues (error connecting to agent: No such file or directory).\nIncorrect user profile folder (C:\\Users\\micha used instead of C:\\Users\\tillyadmin).\nDiagnosis:\nDomain login identity correct (tillynet\\tillyadmin).\nFilesystem path inherited from old local user.\nPlan for Correction:\nFully remove the broken tillyadmin profile.\nReprovision fresh tillyadmin domain account.\nCreate clean C:\\Users\\tillyadmin profile.\nReconfigure SSH keys and Git environment under clean domain context.\nStatus Summary Samba AD DC provisioned successfully.\nWindows domain join successful.\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/provisioning-samba-active-directory-domain-controller-and-windows-domain-integration/","summary":"\u003ch2 id=\"1-server-preparation\"\u003e1. Server Preparation\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eOS:\u003c/strong\u003e Ubuntu Server 24.04.2 LTS\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInitial Setup:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eStatic IP address manually configured\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIP: \u003ccode\u003e172.30.30.30/24\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGateway: \u003ccode\u003e172.30.30.1\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDNS (initially): \u003ccode\u003e172.21.21.21\u003c/code\u003e (Pi-hole)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInstalled basic utilities (OpenSSH, networking tools)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-samba-installation-and-configuration\"\u003e2. Samba Installation and Configuration\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstallation Commands:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt update\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt full-upgrade\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo apt install samba krb5-config krb5-user winbind smbclient\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eService Management:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDisabled default Samba services to prepare for AD DC mode:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo systemctl disable smbd nmbd winbind\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo systemctl stop smbd nmbd winbind\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eProvision Domain Controller:\u003c/strong\u003e\u003c/p\u003e","title":"Provisioning Samba Active Directory Domain Controller and Windows Domain Integration"},{"content":"About Me I\u0026rsquo;m the creator of TillyNet, a fully segmented home lab environment built from the ground up using tools like Proxmox, pfSense, Cisco switches, and TP-Link APs. What started as a curiosity has turned into a full-blown SDN playground.\nI am an IT professional with a foundation in systems support, cybersecurity compliance, and enterprise IT operations—actively transitioning into a career in network engineering. I recently earned my Cisco Certified Network Associate (CCNA 200-301) and hold a CompTIA Security+ certification, with plans underway to achieve the CCNP as I deepen my expertise in advanced networking technologies.\nI bring hands-on experience with enterprise tools such as Active Directory, PowerShell, and BMC Remedy, and have developed automation workflows and SOPs to support secure environments. I also hold an active DoD Tier 3 Secret Clearance, allowing me to operate confidently in both classified and unclassified enclaves.\nWhile I’m not currently in a dedicated networking role, I’m fully committed to building real-world networking experience—spending my own time studying, labbing, and staying current with modern routing, switching, and network security practices.\nI’m eager to join a team where I can apply my existing skill set, grow as a network engineer, and contribute to building reliable, secure, and scalable IT infrastructure.\nLet’s connect—especially if you\u0026rsquo;re looking for someone with the motivation to learn fast, the discipline of a DoD environment, and the technical drive to grow into a high-performing networking professional.\nWhy I Built TillyNet I wanted hands-on experience that went beyond certification books — so I built a real-world network with isolated VLANs, LXC containers, local recursive DNS, firewall segmentation, and full automation pipelines. I even performed remote network recovery using OpenVPN tunnels from my phone.\nWhat You\u0026rsquo;ll Find Here Step-by-step blog posts from each phase of the network buildout Fixes and troubleshooting from hands-on networking Automation scripts with Python, Hugo, and GitHub Actions Infrastructure-as-code ambitions powered by Netmiko, Nornir, and cron jobs Connect GitHub LinkedIn Thanks for reading!\n","permalink":"https://blog.tillynet.com/about/","summary":"\u003ch1 id=\"about-me\"\u003eAbout Me\u003c/h1\u003e\n\u003cp\u003eI\u0026rsquo;m the creator of \u003cstrong\u003eTillyNet\u003c/strong\u003e, a fully segmented home lab environment built from the ground up using tools like Proxmox, pfSense, Cisco switches, and TP-Link APs. What started as a curiosity has turned into a full-blown SDN playground.\u003c/p\u003e\n\u003cp\u003eI am an IT professional with a foundation in systems support, cybersecurity compliance, and enterprise IT operations—actively transitioning into a career in network engineering. I recently earned my Cisco Certified Network Associate (CCNA 200-301) and hold a CompTIA Security+ certification, with plans underway to achieve the CCNP as I deepen my expertise in advanced networking technologies.\u003c/p\u003e","title":"About"},{"content":"Background This post documents the troubleshooting process I followed to resolve an internet connectivity issue affecting virtual machines (VMs) hosted on a Proxmox VE node running on a Wi-Fi-only Dell XPS 15. The VMs were deployed on a routed internal subnet (172.30.30.0/24) with static routes configured through a pfSense firewall. While the VMs could communicate with internal hosts—including DNS and gateway IPs—they were unable to reach external internet addresses such as 8.8.8.8.\nThe setup avoided NAT by design to maintain full route visibility, relying instead on static routing and properly scoped firewall rules.\nEnvironment Overview Proxmox Host: Dell XPS 15 running Proxmox VE 8.4.1 on top of Debian 12\nProxmox VM Subnet: 172.30.30.0/24\nHost Wi-Fi IP: Routed via 172.21.21.15 on VLAN 21\nGateway (pfSense): 172.21.21.1 with a static route pointing to 172.30.30.0/24\nFirewall Role: pfSense acts as central gateway and inter-VLAN router\nIssue Summary Despite a correct static IP configuration on the Arch Linux VM, and successful ping tests to internal IPs (e.g., DNS on 172.21.21.21 and pfSense gateway at 172.21.21.1), the VM could not reach external addresses.\nTroubleshooting Steps 1. Validated VM IP Configuration Set a static IP on the VM from the live Arch Linux installer:\nip addr add 172.30.30.10/24 dev enp0s18\rip link set enp0s18 up\rip route add default via 172.30.30.1\recho \u0026#34;nameserver \u0026lt;172.21.21.21\u0026gt;\u0026#34; \u0026gt; /etc/resolv.conf Ping to internal IPs succeeded, confirming basic layer 3 connectivity.\n2. Captured Outbound Packets Ran tcpdump on the Proxmox host Wi-Fi interface:\nsudo tcpdump -i wlp0s20f3 host 8.8.8.8 Confirmed that ICMP packets were leaving the host to the internet.\n3. Monitored pfSense Interfaces Used pfSense’s built-in packet capture utility to validate:\nOutbound ICMP requests were reaching the WAN interface\nNo ICMP replies were returning\nARP traffic on the WAN was unrelated to the issue\n4. Created an Outbound NAT Rule Realized that pfSense was not NAT\u0026rsquo;ing the routed subnet. Added a rule under: Firewall \u0026gt; NAT \u0026gt; Outbound:\nSource: 172.30.30.0/24\nInterface: WAN\nTranslation: Interface Address\nMode: Hybrid Outbound NAT\n5. Re-tested with Packet Capture Still no success—packets left, but replies were dropped.\n6. Reviewed Firewall Rules Found a restrictive rule on the VLAN 21 interface that only allowed 172.30.30.0/24 to access hosts within VLAN 21. This prevented pfSense from responding to traffic that was destined for external addresses.\n7. Corrected Firewall Rule Modified the rule to allow outbound traffic from 172.30.30.0/24 to any destination. Immediately after saving:\nVM was able to ping 8.8.8.8\ncurl ifconfig.me returned the public IP, confirming full internet access\nOutcome The VM now has stable internet access with proper routing and NAT handling, while retaining the benefits of internal subnet isolation and firewall control. The root issue stemmed from a well-intended but overly strict firewall rule that blocked replies from beyond the VLAN scope.\nNext Steps Refactor firewall rules for tighter security once validation is complete\nConsider isolating NAT-enabled vs. routed-only subnets\nExplore using systemd-networkd for persistent network configs in Arch VMs\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/resolving-internet-connectivity-issues-for-proxmox-vms-on-a-routed-subnet/","summary":"\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eThis post documents the troubleshooting process I followed to resolve an internet connectivity issue affecting virtual machines (VMs) hosted on a Proxmox VE node running on a Wi-Fi-only Dell XPS 15. The VMs were deployed on a routed internal subnet (\u003ccode\u003e172.30.30.0/24\u003c/code\u003e) with static routes configured through a pfSense firewall. While the VMs could communicate with internal hosts—including DNS and gateway IPs—they were unable to reach external internet addresses such as \u003ccode\u003e8.8.8.8\u003c/code\u003e.\u003c/p\u003e","title":"Resolving Internet Connectivity Issues for Proxmox VMs on a Routed Subnet"},{"content":"Overview In this post, I document how I deployed Proxmox VE on a Dell XPS 15 laptop with no physical Ethernet interface. This machine was added to my home lab as a standalone hypervisor, running independently from my main Protectli-based Proxmox node.\nBecause the XPS lacks wired connectivity, I had to work through some unique networking constraints, including bridging over Wi-Fi and enabling connectivity for guest virtual machines. This write-up covers the initial NAT-based setup and the transition to a cleaner routed network model with static routes via pfSense.\nEnvironment Summary Hardware: Dell XPS 15 (no Ethernet NIC)\nHost OS: Debian 12 (Bookworm) base installation\nHypervisor: Proxmox VE 8.4.1 installed manually\nWireless Interface: wlp0s20f3 (connected to VLAN 21 - Production)\nVirtual Bridge: vmbr0 (for LXC and VM traffic on isolated subnet)\nInstalling Proxmox VE 8.4.1 on top of Debian 12 /etc/network/interfaces iface wlp0s20f3 iface wlp0s20f3 inet static address 172.21.21.15/24 gateway 172.21.21.1 wpa-ssid xxxxxx wpa-psk xxxxxxx /etc/hosts 127.0.0.1 localhost.localdomain localhost 127.21.21.15 xps15.tillynet.lan xps15 Reset Interface ifdown wlp0s20f3 ifup wlp0s20f3 Proxmox apt Repository nano /etc/apt/sources.list.d/pve-install-repo.list deb [arch=amd64] http://download.proxmox.com/debian/pve bookworm pve-no-subscription This adds the Proxmox apt repository in the sources.list.d folder.\nwget http://download.proxmox.com/debian/proxmox-release-bookworm.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg This adds the Proxmox gpg key and places it into a specific folder so that apt will find it.\napt update apt full-upgrade Makes sure that everything is up to date before installing Proxmox. Once done, Proxmox can be installed from apt packages with the command below.\napt install proxmox-ve postfix open-iscsi apt remove os-prober Initial Network Setup with NAT Due to the Linux kernel’s limitation on bridging wireless interfaces directly, I created a bridge (vmbr0) with no attached physical ports. Initially, I used NAT (masquerading) to allow outbound internet access for containers and VMs.\n/etc/network/interfaces auto vmbr0 iface vmbr0 inet static address 172.30.30.1/24 bridge_ports none bridge_stp off bridge_fd 0 Do not use bridge-ports, bridge-stp, or bridge-fd — those will fail validation in Debian/Proxmox deployment.\nEnable IP Forwarding nano /etc/sysctl.conf net.ipv4.ip_forward= 1 NAT Rule (iptables) sudo iptables -t nat -A POSTROUTING -s 172.30.30.0/24 -o wlp0s20f3 -j MASQUERADE Make NAT Rule persistent (install iptables-persistent) sudo apt install iptables-persistent This approach allowed outbound traffic but made the Proxmox node act as a NAT gateway. The firewall (pfSense) would only see the host’s IP (172.21.21.15) and not the internal clients.\nTransition to Routed Networking with Static Route To enable full visibility and allow routed traffic from other VLANs, I removed the NAT rule and configured pfSense with a static route to the Proxmox-hosted subnet.\nRemove NAT sudo iptables -t nat -D POSTROUTING -s 172.30.30.0/24 -o wlp0s20f3 -j MASQUERADE Save Cleaned-up Rules sudo iptables-save \u0026gt; /etc/iptables/rules.v4 pfSense Static Route Configuration Destination Network: 172.30.30.0/24\nGateway: 172.21.21.15 (Proxmox host IP)\nInterface: Production VLAN (VLAN 21)\nFirewall Rules: Allowed inter-VLAN access from trusted zones\nLXC/VM Guest Network Settings IP Address: 172.30.30.x\nSubnet Mask: 255.255.255.0\nGateway: 172.30.30.1\nDNS: 172.21.21.21 (internal Pi-hole)\nWith this configuration, all traffic is routed properly between pfSense and the isolated Proxmox subnet, and there\u0026rsquo;s no longer a need for NAT.\nOutcome This setup enabled my Wi-Fi-only XPS laptop to function as a fully routed Proxmox hypervisor on a dedicated subnet. By avoiding NAT, I maintained visibility and control over LXC and VM traffic from my central firewall. The solution is scalable and works well within my VLAN-segmented home lab.\nFuture Plans Add lightweight shared storage (e.g., NFS over VLAN 21)\nAutomate Proxmox LXC deployment and backups via Ansible\nPossibly integrate into a Proxmox cluster using a third quorum-only node\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/deploying-a-proxmox-node-on-a-wi-fi-only-dell-xps-laptop/","summary":"\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this post, I document how I deployed Proxmox VE on a Dell XPS 15 laptop with no physical Ethernet interface. This machine was added to my home lab as a standalone hypervisor, running independently from my main Protectli-based Proxmox node.\u003c/p\u003e\n\u003cp\u003eBecause the XPS lacks wired connectivity, I had to work through some unique networking constraints, including bridging over Wi-Fi and enabling connectivity for guest virtual machines. This write-up covers the initial NAT-based setup and the transition to a cleaner routed network model with static routes via pfSense.\u003c/p\u003e","title":"Deploying a Proxmox Node on a Wi-Fi-Only Dell XPS Laptop"},{"content":"Current Running Version of TillyNet TillyNet is my custom-built home lab environment designed to practice enterprise-grade network segmentation, high availability, and security enforcement using open-source tools. This architecture simulates production-level infrastructure and showcases my capabilities in network engineering, virtualization, firewall administration, and Linux system management.\nNetwork Topology Network Design Objectives Layer 2/3 segmentation using VLANs Centralized routing and firewalling with pfSense Hypervisor-based infrastructure using Proxmox VE Containerized services for DNS and wireless controller management Policy-based access control enforced through inter-VLAN firewall rules Minimal trust zones with internal DNS filtering and strict pathing VLAN Overview VLAN ID Purpose Subnet 1 Default/legacy 172.16.7.0/24 14 Guest Wi-Fi 172.16.14.0/24 21 Production DNS 172.21.21.0/24 99 Management Access 172.16.99.0/24 666 Native Trunk VLAN N/A Each VLAN is routed via a pfSense firewall using a router-on-a-stick model over a single trunk interface connected to a managed Cisco Catalyst switch.\nCore Infrastructure Router/Firewall pfSense (virtualized) on a dedicated x86 appliance Handles inter-VLAN routing, DHCP, NAT, and firewall policy enforcement Configured with strict rules: Inter-VLAN traffic is blocked by default Each VLAN is only permitted DNS access to a local recursive DNS server Admin GUI access is restricted to the management VLAN Proxmox Virtualization Host: Protectli Vault (fanless x86 appliance)\nProxmox VE 8.3 running:\npfSense VM (firewall/gateway) LXC container: Pi-hole DNS (VLAN 21) LXC container: Omada Controller (VLAN 99) Network bridges:\nvmbr0: Management (backup) vmbr1: Trunked interface to switch (VLANs 14, 21, 99) vmbr1.99: Tagged VLAN interface for host-level MGMT access Linux Networking (Proxmox) The Proxmox host is configured using Linux network bridges with VLAN-aware capabilities to support secure, segmented networking for containers and virtual machines. All networking is statically defined in /etc/network/interfaces, offering full control and reproducibility of the setup.\nThis design ensures:\nVLAN tagging at the hypervisor level\nTrunk delivery of VLANs to LXCs and pfSense VM\nHost isolation through a dedicated VLAN interface (vmbr1.99)\nCompatibility with PCI passthrough NICs for physical routing\nNetwork Interface Layout Interface Role Type IP Address Notes enp2s0 pfSense LAN PCI passthru — Routed to switch for VLAN trunking enp3s0 pfSense WAN PCI passthru — Connected to ISP modem enp1s0 MGMT bridge uplink Physical — Tagged VLAN trunk to Catalyst enp4s0 Backup management Physical — Static untagged link vmbr0 Backup mgmt bridge Linux bridge 172.16.7.15/24 Management fallback IP vmbr1 VLAN trunk bridge Linux bridge — Tagged VLAN trunk to containers vmbr1.99 Host MGMT interface VLAN subif 172.16.99.15/24 Used for Proxmox admin access /etc/network/interfaces Configuration\nauto lo iface lo inet loopback # Backup Management Physical NIC iface enp4s0 inet manual # MGMT Trunk NIC iface enp1s0 inet manual # PCI Passthrough to pfSense iface enp2s0 inet manual iface enp3s0 inet manual # Backup Management Bridge (Plan to decommission) auto vmbr0 iface vmbr0 inet static address 172.16.7.15/24 bridge-ports enp4s0 bridge-stp off bridge-fd 0 bridge-vlan-aware yes bridge-vids 2-4094 dns-nameservers 1.1.1.1 8.8.8.8 # MGMT Trunk Bridge auto vmbr1 iface vmbr1 inet manual bridge-ports enp1s0 bridge-stp off bridge-fd 0 bridge-vlan-aware yes bridge-vids 2-4094 # VLAN 99 Subinterface for Proxmox Host auto vmbr1.99 iface vmbr1.99 inet static address 172.16.99.15/24 gateway 172.16.99.1 VLAN Usage by Containers Each LXC container is assigned to the appropriate VLAN through Proxmox’s vlan tag setting, while still connected to the same vmbr1 bridge. This enables seamless multi-VLAN networking without needing additional physical NICs.\nOmada Controller:\nBridge: vmbr1 VLAN Tag: 99 IP: 172.16.99.35/24 Pi-hole DNS:\nBridge: vmbr1 VLAN Tag: 21 IP: 172.21.21.21/24 With this configuration, containers receive only the VLAN traffic they are explicitly assigned, and host-level access is limited to a single tagged VLAN interface — a model that mirrors enterprise best practices in virtual networking.\nHost-Level VLAN Interface To maintain separation between the Proxmox host and the container traffic, a dedicated subinterface vmbr1.99 is configured for the management VLAN. This allows host-level SSH and web access only from the management network.\nauto vmbr1.99 iface vmbr1.99 inet static address 172.16.99.15/24 gateway 172.16.99.1 vlan-raw-device vmbr1 LXC Automation \u0026amp; Cron Jobs To maintain the health and performance of containerized services within TillyNet, I’ve implemented lightweight automation using cron inside each LXC. This approach keeps core services updated and resilient without the overhead of full-scale configuration management tools — while still remaining extensible.\nPi-hole (LXC 300) Automated via root cron job:\n# Run Pi-hole gravity update daily at 2:00 AM 0 2 * * * /usr/local/bin/pihole updateGravity \u0026gt; /var/log/pihole_cron.log 2\u0026gt;\u0026amp;1 This ensures the ad-blocking and threat feed lists are kept up-to-date without manual intervention.\nOmada Controller (LXC 200) Automated via cron for regular backups:\n# Backup Omada site config every day at 3:00 AM 0 3 * * * /opt/tplink/omada/data/autobackup.sh \u0026gt;\u0026gt; /var/log/omada_backup.log 2\u0026gt;\u0026amp;1 The backup script syncs the controller config and wireless SSID/site layout to a local or external backup target.\nSystem-Wide (Both LXCs) General update routine:\n# Security updates every Sunday at 4:00 AM 0 4 * * 0 apt update \u0026amp;\u0026amp; apt -y upgrade \u0026gt;\u0026gt; /var/log/apt_cron.log 2\u0026gt;\u0026amp;1 This ensures both containers remain patched and secured, with logs rotated weekly via logrotate.\nServices \u0026amp; Roles Service Location IP (Subnet) VLAN Notes Firewall/Gateway pfSense VM Trunked interface All Routes all VLANs DNS Filtering Pi-hole LXC 172.21.21.21/24 21 Internal DNS for all VLANs WAP Control Omada Controller 172.16.99.35/24 99 Manages EAP access points Management GUI Proxmox Host 172.16.99.15/24 99 VLAN-tagged virtual interface Switching Layer Cisco Catalyst 2960-C switch Configured with trunk ports for uplinks and Proxmox host Native VLAN 666 used to isolate untagged traffic Access and trunk ports statically assigned to appropriate VLANs STP (PVST) with system-id extension enabled Wireless Infrastructure Access Point: TP-Link Omada EAP series Guest Wi-Fi SSID isolated via VLAN 14 WPA2/WPA3 mixed security VLAN tagging applied per SSID to ensure proper segmentation Security Posture DNS Centralization: All VLANs rely on a local Pi-hole for DNS queries Access Control: Only specific ports (e.g., DNS, admin access) allowed Microsegmentation: Each VLAN is isolated; no lateral movement allowed GUI Lockdown: Firewall admin access restricted to trusted VLAN Guest Isolation: Guest devices have zero access to internal infrastructure Learning Outcomes \u0026amp; Skills Demonstrated Advanced VLAN trunking and switch configuration Implementation of router-on-a-stick using pfSense Design of containerized services using LXC on Proxmox Mastery of firewall rule creation and policy-based routing Application of zero trust principles in a home network Real-world exposure to enterprise wireless configuration Linux and open-source toolchain integration Final Notes This deployment represents the current live version of TillyNet and serves both as a personal learning platform and a functional demonstration of scalable, secure network design. Each layer is intentionally crafted to mirror best practices seen in production environments across SMB and enterprise infrastructure.\nFuture plans include using Ansible for automated provisioning of LXC containers and firewall rule templating. This is version 2.0 of TillyNet. Future versions will expand automation, introduce container orchestration, and deploy a backup DNS service.\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/current-running-version-of-tillynet/","summary":"\u003ch1 id=\"current-running-version-of-tillynet\"\u003eCurrent Running Version of TillyNet\u003c/h1\u003e\n\u003cp\u003eTillyNet is my custom-built home lab environment designed to practice enterprise-grade network segmentation, high availability, and security enforcement using open-source tools. This architecture simulates production-level infrastructure and showcases my capabilities in network engineering, virtualization, firewall administration, and Linux system management.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"network-topology\"\u003eNetwork Topology\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Image\" loading=\"lazy\" src=\"/images/tillynet_mermaid.png\"\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"network-design-objectives\"\u003eNetwork Design Objectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLayer 2/3 segmentation\u003c/strong\u003e using VLANs\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCentralized routing and firewalling\u003c/strong\u003e with pfSense\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHypervisor-based infrastructure\u003c/strong\u003e using Proxmox VE\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eContainerized services\u003c/strong\u003e for DNS and wireless controller management\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePolicy-based access control\u003c/strong\u003e enforced through inter-VLAN firewall rules\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMinimal trust zones\u003c/strong\u003e with internal DNS filtering and strict pathing\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"vlan-overview\"\u003eVLAN Overview\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eVLAN ID\u003c/th\u003e\n          \u003cth\u003ePurpose\u003c/th\u003e\n          \u003cth\u003eSubnet\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003eDefault/legacy\u003c/td\u003e\n          \u003ctd\u003e172.16.7.0/24\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e14\u003c/td\u003e\n          \u003ctd\u003eGuest Wi-Fi\u003c/td\u003e\n          \u003ctd\u003e172.16.14.0/24\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e21\u003c/td\u003e\n          \u003ctd\u003eProduction DNS\u003c/td\u003e\n          \u003ctd\u003e172.21.21.0/24\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e99\u003c/td\u003e\n          \u003ctd\u003eManagement Access\u003c/td\u003e\n          \u003ctd\u003e172.16.99.0/24\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e666\u003c/td\u003e\n          \u003ctd\u003eNative Trunk VLAN\u003c/td\u003e\n          \u003ctd\u003eN/A\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eEach VLAN is routed via a pfSense firewall using a router-on-a-stick model over a single trunk interface connected to a managed Cisco Catalyst switch.\u003c/p\u003e","title":"Current Running Version of TillyNet"},{"content":"Creating a Network Topology Using Graphviz and diagrams Package in Python This post outlines my initial attempts at visualizing the architecture of my home lab environment using Python-based tools. Given the complexity of my setup, traditional visualization methods weren’t sufficient. After coming across a post about using the graphviz engine with the diagrams Python package, I decided to experiment with it.\nThe toolchain proved useful for rendering simple network flows, and while it doesn’t fully capture the complexity of my environment, it’s a valuable starting point for documentation and network planning. Below is a walkthrough of how to get started, along with a sample script and the resulting topology diagram.\nTools Used Python – Scripting language used to build the topology diagram. Graphviz – Graph rendering engine that powers diagram generation. Diagrams – Python library for programmatically defining and visualizing infrastructure components. Installation Installation is straightforward. Follow the official documentation on the diagrams website.\nWindows users: Be sure to add the Graphviz\\bin directory to your system\u0026rsquo;s user PATH:\nPress Win + R and type sysdm.cpl to open System Properties. Navigate to the Advanced tab and click Environment Variables. Under User variables, select Path, then click Edit. Add a new entry pointing to your Graphviz bin directory. Click OK to save and close the dialogs. My Graphviz Python Script from diagrams import Cluster, Diagram from diagrams.onprem.network import Internet from diagrams.generic.network import Switch from diagrams.generic.os import Windows from diagrams.generic.device import Mobile from diagrams.onprem.network import Pfsense from diagrams.onprem.proxmox import Pve from diagrams.onprem.proxmox import ProxmoxVE from diagrams.generic.network import Router from diagrams.generic.network import VPN with Diagram(\u0026#34;TillyNet Home Lab Topology\u0026#34;, show=True, direction=\u0026#34;LR\u0026#34;): internet = Internet(\u0026#34;ISP\u0026#34;) switch = Switch(\u0026#34;Catalyst 2960-C\u0026#34;) openvpn = VPN(\u0026#34;OpenVPN Tunnel\u0026#34;) with Cluster(\u0026#34;.\\nVirtualizated Stack\u0026#34;): pfsense = Pfsense(\u0026#34;pfSense FW\u0026#34;) proxmox = Pve(\u0026#34;Hypervisor\u0026#34;) with Cluster(\u0026#34;VLAN 99 - Management\u0026#34;): mgmt_pc = Windows(\u0026#34;Win Mgmt PC\u0026#34;) ap_mgmt = Router(\u0026#34;EAP670 AP\u0026#34;,) omada = ProxmoxVE(\u0026#34;Omada Controller\u0026#34;) proxmox_mgmt = Pve(\u0026#34;Proxmox Management\u0026#34;) with Cluster(\u0026#34;VLAN 14 - Guest\u0026#34;): guest_wifi = Mobile(\u0026#34;Guest Devices\u0026#34;) with Cluster(\u0026#34;.\\nVLAN 21 - Production\u0026#34;): pihole = ProxmoxVE(\u0026#34;Pi-hole\u0026#34;) with Cluster(\u0026#34;.\\nRemote Management\u0026#34;): remote_mgmt = Mobile(\u0026#34;Remote Manager\u0026#34;) # Connections internet \u0026gt;\u0026gt; pfsense pfsense \u0026gt;\u0026gt; switch switch \u0026gt;\u0026gt; [mgmt_pc, omada, proxmox_mgmt, ap_mgmt, pihole] ap_mgmt \u0026gt;\u0026gt; guest_wifi remote_mgmt \u0026gt;\u0026gt; openvpn openvpn \u0026gt;\u0026gt; mgmt_pc Generated Network Topology Current TillyNet Home Lab Environment - Summary The TillyNet home lab is a virtualized, VLAN-segmented network environment designed to simulate enterprise-grade infrastructure and support hands-on experimentation with routing, firewalling, and network automation technologies. It is built around a Proxmox VE hypervisor hosted on a Protectli Vault VP2420, which runs multiple virtual machines and LXC containers to provide core network services.\nKey components include:\nProxmox VE: Serves as the core hypervisor with both VM and container-based workloads. It utilizes PCI passthrough for direct access to physical NICs.\npfSense Firewall (VM): Operates as the primary gateway using a router-on-a-stick configuration via a trunked LAN interface to a Cisco Catalyst 2960-C switch. It handles all inter-VLAN routing, DHCP, and firewall policies.\nVLAN Configuration:\nVLAN 1 – Native LAN\nVLAN 14 – Guest network, isolated and tagged for wireless SSID on the access point\nVLAN 21 – Production network housing internal services like DNS (Pi-hole)\nVLAN 99 – Management network, used for administrative access to Proxmox, Omada Controller, and the access point\nPi-hole (LXC): Runs as the local recursive DNS resolver for the production VLAN.\nOmada Controller (LXC): Manages the TP-Link EAP670 access point and wireless network provisioning.\nTP-Link EAP670 (AP): Connected via a trunk port to the Catalyst switch to support both VLAN 14 (guest) and VLAN 99 (management).\nCisco Catalyst 2960-C Switch: Provides L2 switching with trunk and access port configurations to support VLAN segmentation and inter-device communication.\nThis architecture allows for advanced testing of enterprise networking scenarios, including network segmentation, access control, VLAN trunking, recursive DNS, and wireless network integration — all within a self-hosted environment.\nFinal Thoughts The diagrams library combined with graphviz is a powerful tool for basic network visualization. While it may not be suited for highly detailed or dynamic environments, it offers a clean way to represent logical infrastructure layouts. I plan to continue exploring more advanced or specialized network visualization tools, but this is a solid foundation for documenting my home lab.\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/experimenting-with-network-topologies/","summary":"\u003ch1 id=\"creating-a-network-topology-using-graphviz-and-diagrams-package-in-python\"\u003eCreating a Network Topology Using Graphviz and diagrams Package in Python\u003c/h1\u003e\n\u003cp\u003eThis post outlines my initial attempts at visualizing the architecture of my home lab environment using Python-based tools. Given the complexity of my setup, traditional visualization methods weren’t sufficient. After coming across a post about using the \u003ccode\u003egraphviz\u003c/code\u003e engine with the \u003ccode\u003ediagrams\u003c/code\u003e Python package, I decided to experiment with it.\u003c/p\u003e\n\u003cp\u003eThe toolchain proved useful for rendering simple network flows, and while it doesn’t fully capture the complexity of my environment, it’s a valuable starting point for documentation and network planning. Below is a walkthrough of how to get started, along with a sample script and the resulting topology diagram.\u003c/p\u003e","title":"Experimenting With Network Topologies"},{"content":"Obsidian → Hugo → GitHub → Hostinger Automation Workflow This post documents the full setup of my static site publishing pipeline that automates taking blog posts from Obsidian, rendering them with Hugo, pushing the output to GitHub, and then having Hostinger automatically update my website via webhook.\nTools Used Obsidian – Markdown note-taking and blog writing Hugo – Static site generator using the PaperMod theme Hugo PaperMod Wiki My Hugo yaml File GitHub – Repository with two branches: master → Hugo project \u0026amp; content hostinger → Static site output Hostinger – Web hosting platform with webhook integration Python – Automation script for content syncing and site deployment My Automation Script 📁 Folder Structure 📂 Local_Obsidian_Vault/ └── my-home-lab-journey/ ├── post-1/ └── index.md ├── post-2/ └── index.md ├── post-3/ └── index.md └── ... 📂 tillynetblog/ ├── hugo.yaml ├── content/ │ └── my-home-lab-journey/ ├── public/ ├── themes/ │ └── PaperMod/ └── static/ └── images └── css/custom.css What the Automation Script Does Imports import os import shutil import subprocess import re os: for filesystem operations like path handling shutil: for copying/removing files and directories subprocess: for running shell commands like hugo and git re: for finding image links in markdown via regular expressions Configuration obsidian_dir = r\u0026#34;C:\\Users\\micha\\Documents\\Local_Obsidian_Vault\\my-home-lab-journey\u0026#34; hugo_root_dir = r\u0026#34;C:\\Users\\micha\\Documents\\tillynetblog\u0026#34; hugo_content_dir = os.path.join(hugo_root_dir, \u0026#34;content\u0026#34;, \u0026#34;my-home-lab-journey\u0026#34;) attachments_dir = r\u0026#34;C:\\Users\\micha\\Documents\\Local_Obsidian_Vault\\assets\\images\u0026#34; static_images_dir = os.path.join(hugo_root_dir, \u0026#34;static\u0026#34;, \u0026#34;images\u0026#34;) about_src = r\u0026#34;C:\\Users\\micha\\Documents\\Local_Obsidian_Vault\\pages\\about.md\u0026#34; about_dst_dir = os.path.join(hugo_root_dir, \u0026#34;content\u0026#34;, \u0026#34;about\u0026#34;) about_dst = os.path.join(about_dst_dir, \u0026#34;index.md\u0026#34;) base_url = \u0026#34;https://blog.tillynet.com\u0026#34; Sets paths to: Obsidian content (obsidian_dir) Hugo blog folder Where to copy markdown posts Where Obsidian images are and where to move them Source/destination for the about.md file The blog\u0026rsquo;s base URL for Hugo STEP 1: Copy Markdown Posts if os.path.exists(hugo_content_dir): shutil.rmtree(hugo_content_dir) shutil.copytree(obsidian_dir, hugo_content_dir) print(\u0026#34;✔ Copied markdown posts from Obsidian.\u0026#34;) Deletes existing markdown content in Hugo Copies fresh markdown files from Obsidian Confirms the copy STEP 2: Convert Image Embeds and Copy Images for subdir, _, files in os.walk(hugo_content_dir): for filename in files: if filename.endswith(\u0026#34;.md\u0026#34;): ... iterates through every markdown file in the blog content images = re.findall(r\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;, content) Looks for image link like (example.png) for image in images: markdown_image = f\u0026#34;![Image](/images/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; Replaces with standard Markdown image syntax src_image = os.path.join(attachments_dir, image) if os.path.exists(src_image): shutil.copy(src_image, static_images_dir) copies matching images from Obsidian to Hugo\u0026rsquo;s static image folder with open(md_path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) Overwrites the file with the updated content print(\u0026#34;✔ Processed images and updated markdown links.\u0026#34;) Confirms processing is complete STEP 3: Copy About Page if os.path.exists(about_src): os.makedirs(about_dst_dir, exist_ok=True) shutil.copyfile(about_src, about_dst) print(\u0026#34;✔ Updated About page as /about/index.md.\u0026#34;) else: print(\u0026#34;⚠ About page not found in Obsidian vault; skipping.\u0026#34;) Copies about.md from Obsidian to Hugo content Skips and warns if the file is missing STEP 4: Clean Existing public/ Folder public_dir = os.path.join(hugo_root_dir, \u0026#34;public\u0026#34;) if os.path.exists(public_dir): shutil.rmtree(public_dir) print(\u0026#34;✔ Cleaned existing public/ folder.\u0026#34;) Removes the old public/ folder Forces Hugo to rebuild the entire static site from scratch, picking up all new pages and changes STEP 5: Build the Hugo Site subprocess.run([\u0026#34;hugo\u0026#34;, \u0026#34;--buildDrafts\u0026#34;, \u0026#34;--buildFuture\u0026#34;, \u0026#34;-b\u0026#34;, base_url], cwd=hugo_root_dir, check=True) print(\u0026#34;✔ Hugo site built with baseURL.\u0026#34;) Builds the site using the hugo command with my specified BaseURL STEP 6: Push Source Files to GitHub master subprocess.run([\u0026#34;git\u0026#34;, \u0026#34;checkout\u0026#34;, \u0026#34;master\u0026#34;], cwd=hugo_root_dir, check=True) subprocess.run([\u0026#34;git\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;.\u0026#34;], cwd=hugo_root_dir, check=True) subprocess.run([\u0026#34;git\u0026#34;, \u0026#34;commit\u0026#34;, \u0026#34;-m\u0026#34;, \u0026#34;Update blog content\u0026#34;], cwd=hugo_root_dir, check=False) subprocess.run([\u0026#34;git\u0026#34;, \u0026#34;push\u0026#34;, \u0026#34;origin\u0026#34;, \u0026#34;master\u0026#34;], cwd=hugo_root_dir, check=True) print(\u0026#34;✔ Pushed changes to GitHub master.\u0026#34;) Commits and pushes all changes to the master branch STEP 7: Deploy Public Folder to hostinger Branch subprocess.run([\u0026#34;git\u0026#34;, \u0026#34;subtree\u0026#34;, \u0026#34;split\u0026#34;, \u0026#34;--prefix\u0026#34;, \u0026#34;public\u0026#34;, \u0026#34;-b\u0026#34;, \u0026#34;hostinger-deploy\u0026#34;], cwd=hugo_root_dir, check=True) subprocess.run([\u0026#34;git\u0026#34;, \u0026#34;push\u0026#34;, \u0026#34;origin\u0026#34;, \u0026#34;hostinger-deploy:hostinger\u0026#34;, \u0026#34;--force\u0026#34;], cwd=hugo_root_dir, check=True) subprocess.run([\u0026#34;git\u0026#34;, \u0026#34;branch\u0026#34;, \u0026#34;-D\u0026#34;, \u0026#34;hostinger-deploy\u0026#34;], cwd=hugo_root_dir, check=True) print(\u0026#34;✔ Deployed public/ folder to GitHub hostinger branch.\u0026#34;) Splits public/ into a new branch Pushes it forcefully to the hostinger branch on GitHub (used for site deployment) Deletes the temporary hostinger-deploy branch This is necessary for our webhook to recognize the changes Issues I Encountered CSS Not Applying on Deployed Site Root Cause: Hostinger was caching fingerprinted CSS\nFix:\nDisabled Hugo asset fingerprinting in hugo.yaml:\nassets: disableFingerprinting: true Verified correct path: assets/css/custom.css\nLessons Learned Static site deployment workflows require full control over content paths and assets Asset fingerprinting can break styling if not handled properly Obsidian\u0026rsquo;s [[embed]] syntax must be converted for Hugo compatibility Git subtree pushing keeps deployment clean and isolated to public/ Have my python automation script remove the old public/ folder so that Hugo is forced to rebuild the entire static site from scratch thus picking up all new pages and changes Final Outcome End-to-end deployment is fully automated\nBlog posts are written in Obsidian subfolders\nSingle Python script deploys everything to GitHub and Hostinger\nDuplicate post issues and CSS bugs resolved\nDark/light theme and custom styles work across devices\nResume Bullet Built an automated static site deployment pipeline linking Obsidian, Hugo (PaperMod), GitHub, and Hostinger via webhook; resolved CSS asset fingerprinting issues, enabled Hugo theme integration, and automated blog post syncing using Python.\n","permalink":"https://blog.tillynet.com/my-home-lab-journey/building-my-publishing-pipeline-obsidian-hugo-github-hostinger/","summary":"\u003ch1 id=\"obsidian--hugo--github--hostinger-automation-workflow\"\u003eObsidian → Hugo → GitHub → Hostinger Automation Workflow\u003c/h1\u003e\n\u003cp\u003eThis post documents the full setup of my \u003cstrong\u003estatic site publishing pipeline\u003c/strong\u003e that automates taking blog posts from \u003cstrong\u003eObsidian\u003c/strong\u003e, rendering them with \u003cstrong\u003eHugo\u003c/strong\u003e, pushing the output to \u003cstrong\u003eGitHub\u003c/strong\u003e, and then having \u003cstrong\u003eHostinger\u003c/strong\u003e automatically update my website via webhook.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"tools-used\"\u003eTools Used\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eObsidian\u003c/strong\u003e – Markdown note-taking and blog writing\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHugo\u003c/strong\u003e – Static site generator using the \u003ca href=\"https://github.com/adityatelange/hugo-PaperMod\"\u003ePaperMod theme\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/adityatelange/hugo-PaperMod/wiki/Installation\"\u003eHugo PaperMod Wiki\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/michaeltilly/tillynetblog/blob/master/hugo.yaml\"\u003eMy Hugo yaml File\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGitHub\u003c/strong\u003e – Repository with two branches:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emaster\u003c/code\u003e → Hugo project \u0026amp; content\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehostinger\u003c/code\u003e → Static site output\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostinger\u003c/strong\u003e – Web hosting platform with webhook integration\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePython\u003c/strong\u003e – Automation script for content syncing and site deployment \u003ca href=\"https://github.com/michaeltilly/tillynetblog/blob/master/deploy_tillynetblog2.py\"\u003eMy Automation Script\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"-folder-structure\"\u003e📁 Folder Structure\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e📂 Local_Obsidian_Vault/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  └── my-home-lab-journey/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      ├── post-1/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t        └── index.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      ├── post-2/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t        └── index.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      ├── post-3/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t        └── index.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      └── ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e📂 tillynetblog/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ├── hugo.yaml\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ├── content/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  │   └── my-home-lab-journey/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ├── public/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  ├── themes/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  │   └── PaperMod/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  └── static/\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t  └── images\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      └── css/custom.css\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"what-the-automation-script-does\"\u003eWhat the Automation Script Does\u003c/h2\u003e\n\u003ch3 id=\"imports\"\u003eImports\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eos\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eshutil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esubprocess\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ere\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eos\u003c/strong\u003e: for filesystem operations like path handling\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eshutil\u003c/strong\u003e: for copying/removing files and directories\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esubprocess\u003c/strong\u003e: for running shell commands like \u003ccode\u003ehugo\u003c/code\u003e and \u003ccode\u003egit\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ere\u003c/strong\u003e: for finding image links in markdown via regular expressions\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"configuration\"\u003eConfiguration\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eobsidian_dir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003er\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;C:\\Users\\micha\\Documents\\Local_Obsidian_Vault\\my-home-lab-journey\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003er\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;C:\\Users\\micha\\Documents\\tillynetblog\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ehugo_content_dir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;my-home-lab-journey\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eattachments_dir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003er\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;C:\\Users\\micha\\Documents\\Local_Obsidian_Vault\\assets\\images\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003estatic_images_dir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;static\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;images\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eabout_src\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003er\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;C:\\Users\\micha\\Documents\\Local_Obsidian_Vault\\pages\\about.md\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eabout_dst_dir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;about\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eabout_dst\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eabout_dst_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;index.md\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ebase_url\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://blog.tillynet.com\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSets paths to:\n\u003cul\u003e\n\u003cli\u003eObsidian content (\u003ccode\u003eobsidian_dir\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eHugo blog folder\u003c/li\u003e\n\u003cli\u003eWhere to copy markdown posts\u003c/li\u003e\n\u003cli\u003eWhere Obsidian images are and where to move them\u003c/li\u003e\n\u003cli\u003eSource/destination for the \u003ccode\u003eabout.md\u003c/code\u003e file\u003c/li\u003e\n\u003cli\u003eThe blog\u0026rsquo;s base URL for Hugo\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-1-copy-markdown-posts\"\u003eSTEP 1: Copy Markdown Posts\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_content_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eshutil\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ermtree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_content_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eshutil\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecopytree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobsidian_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ehugo_content_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;✔ Copied markdown posts from Obsidian.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eDeletes existing markdown content in Hugo\u003c/li\u003e\n\u003cli\u003eCopies fresh markdown files from Obsidian\u003c/li\u003e\n\u003cli\u003eConfirms the copy\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-2-convert-image-embeds-and-copy-images\"\u003eSTEP 2: Convert Image Embeds and Copy Images\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003esubdir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efiles\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewalk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_content_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003efilename\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003efiles\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003efilename\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eendswith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;.md\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eiterates through every markdown file in the blog content\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003eimages\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efindall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003er\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eLooks for image link like (\u003ccode\u003eexample.png\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eimage\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eimages\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003emarkdown_image\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sa\"\u003ef\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;![Image](/images/\u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eimage\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;%20\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e)\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplaces with standard Markdown image syntax\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003esrc_image\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eattachments_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esrc_image\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"n\"\u003eshutil\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecopy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esrc_image\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estatic_images_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003ecopies matching images from Obsidian to Hugo\u0026rsquo;s static image folder\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emd_path\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eencoding\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;utf-8\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eOverwrites the file with the updated content\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;✔ Processed images and updated markdown links.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eConfirms processing is complete\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-3-copy-about-page\"\u003eSTEP 3: Copy About Page\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eabout_src\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003emakedirs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eabout_dst_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexist_ok\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eshutil\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecopyfile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eabout_src\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eabout_dst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;✔ Updated About page as /about/index.md.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;⚠ About page not found in Obsidian vault; skipping.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eCopies \u003ccode\u003eabout.md\u003c/code\u003e from Obsidian to Hugo content\u003c/li\u003e\n\u003cli\u003eSkips and warns if the file is missing\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-4-clean-existing-public-folder\"\u003eSTEP 4: Clean Existing \u003ccode\u003epublic/\u003c/code\u003e Folder\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003epublic_dir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;public\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eexists\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epublic_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003eshutil\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ermtree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epublic_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;✔ Cleaned existing public/ folder.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eRemoves the old \u003ccode\u003epublic/\u003c/code\u003e folder\u003c/li\u003e\n\u003cli\u003eForces Hugo to rebuild the entire static site from scratch, picking up all new pages and changes\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-5-build-the-hugo-site\"\u003eSTEP 5: Build the Hugo Site\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;hugo\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;--buildDrafts\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;--buildFuture\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;-b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_url\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;✔ Hugo site built with baseURL.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eBuilds the site using the \u003ccode\u003ehugo\u003c/code\u003e command with my specified \u003ccode\u003eBaseURL\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-6-push-source-files-to-github-master\"\u003eSTEP 6: Push Source Files to GitHub \u003ccode\u003emaster\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;checkout\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;master\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;add\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;commit\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;-m\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Update blog content\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eFalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;push\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;master\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;✔ Pushed changes to GitHub master.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eCommits and pushes all changes to the \u003ccode\u003emaster\u003c/code\u003e branch\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"step-7-deploy-public-folder-to-hostinger-branch\"\u003eSTEP 7: Deploy Public Folder to \u003ccode\u003ehostinger\u003c/code\u003e Branch\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;subtree\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;split\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;--prefix\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;public\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;-b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hostinger-deploy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;push\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;origin\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hostinger-deploy:hostinger\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;--force\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;branch\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;-D\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;hostinger-deploy\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ehugo_root_dir\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echeck\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;✔ Deployed public/ folder to GitHub hostinger branch.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSplits \u003ccode\u003epublic/\u003c/code\u003e into a new branch\u003c/li\u003e\n\u003cli\u003ePushes it forcefully to the \u003ccode\u003ehostinger\u003c/code\u003e branch on GitHub (used for site deployment)\u003c/li\u003e\n\u003cli\u003eDeletes the temporary \u003ccode\u003ehostinger-deploy\u003c/code\u003e branch\n\u003cul\u003e\n\u003cli\u003eThis is necessary for our webhook to recognize the changes\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"issues-i-encountered\"\u003eIssues I Encountered\u003c/h2\u003e\n\u003ch3 id=\"css-not-applying-on-deployed-site\"\u003eCSS Not Applying on Deployed Site\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eRoot Cause:\u003c/strong\u003e Hostinger was caching fingerprinted CSS\u003c/p\u003e","title":"Building My Publishing Pipeline: Obsidian → Hugo → GitHub → Hostinger"},{"content":"Pi-hole DNS Migration to Production VLAN Overview This phase of the HomeLab project documents the successful migration of the internal Pi-hole DNS server from the flat LAN network to a newly created and isolated Production VLAN. This change enhances security, improves segmentation, and prepares the environment for scalable DNS resolution across all other VLANs.\nObjectives Create and configure a dedicated Production VLAN on pfSense Migrate the Pi-hole LXC container to the new VLAN Ensure inter-VLAN DNS resolution using Pi-hole Apply proper firewall rules to restrict unnecessary access Update DHCP DNS settings across all VLANs Network Summary Component Before Migration After Migration Pi-hole Location LAN network (untagged) Production VLAN (tagged) VLAN ID - Production VLAN ID Subnet LAN Subnet Production Subnet Pi-hole IP LAN Assigned IP VLAN-assigned static IP Access Open to LAN Inter-VLAN DNS only (port 53) Steps Performed 1. Created Production VLAN in pfSense Navigated to Interfaces \u0026gt; Assignments \u0026gt; VLANs Assigned a unique VLAN tag and set the parent interface (LAN) Created new interface, enabled it, and assigned a static IPv4 gateway 2. Updated Pi-hole LXC Container Configuration Edited the container via Proxmox: pct set \u0026lt;CTID\u0026gt; -net0 name=eth0,bridge=vmbr0,tag=\u0026lt;VLAN_ID\u0026gt;,ip=\u0026lt;Pi-hole_IP\u0026gt;/24,gw=\u0026lt;VLAN_Gateway\u0026gt; ","permalink":"https://blog.tillynet.com/my-home-lab-journey/pi-hole-dns-migration-to-production-vlan/","summary":"\u003ch1 id=\"pi-hole-dns-migration-to-production-vlan\"\u003ePi-hole DNS Migration to Production VLAN\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eThis phase of the HomeLab project documents the successful migration of the internal Pi-hole DNS server from the flat LAN network to a newly created and isolated \u003cstrong\u003eProduction VLAN\u003c/strong\u003e. This change enhances security, improves segmentation, and prepares the environment for scalable DNS resolution across all other VLANs.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"objectives\"\u003eObjectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCreate and configure a dedicated Production VLAN on pfSense\u003c/li\u003e\n\u003cli\u003eMigrate the Pi-hole LXC container to the new VLAN\u003c/li\u003e\n\u003cli\u003eEnsure inter-VLAN DNS resolution using Pi-hole\u003c/li\u003e\n\u003cli\u003eApply proper firewall rules to restrict unnecessary access\u003c/li\u003e\n\u003cli\u003eUpdate DHCP DNS settings across all VLANs\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"network-summary\"\u003eNetwork Summary\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eComponent\u003c/th\u003e\n          \u003cth\u003eBefore Migration\u003c/th\u003e\n          \u003cth\u003eAfter Migration\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ePi-hole Location\u003c/td\u003e\n          \u003ctd\u003eLAN network (untagged)\u003c/td\u003e\n          \u003ctd\u003eProduction VLAN (tagged)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eVLAN ID\u003c/td\u003e\n          \u003ctd\u003e-\u003c/td\u003e\n          \u003ctd\u003eProduction VLAN ID\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eSubnet\u003c/td\u003e\n          \u003ctd\u003eLAN Subnet\u003c/td\u003e\n          \u003ctd\u003eProduction Subnet\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003ePi-hole IP\u003c/td\u003e\n          \u003ctd\u003eLAN Assigned IP\u003c/td\u003e\n          \u003ctd\u003eVLAN-assigned static IP\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eAccess\u003c/td\u003e\n          \u003ctd\u003eOpen to LAN\u003c/td\u003e\n          \u003ctd\u003eInter-VLAN DNS only (port 53)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"steps-performed\"\u003eSteps Performed\u003c/h2\u003e\n\u003ch3 id=\"1-created-production-vlan-in-pfsense\"\u003e1. Created Production VLAN in pfSense\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eNavigated to \u003cstrong\u003eInterfaces \u0026gt; Assignments \u0026gt; VLANs\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eAssigned a unique VLAN tag and set the parent interface (LAN)\u003c/li\u003e\n\u003cli\u003eCreated new interface, enabled it, and assigned a static IPv4 gateway\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-updated-pi-hole-lxc-container-configuration\"\u003e2. Updated Pi-hole LXC Container Configuration\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEdited the container via Proxmox:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epct \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u0026lt;CTID\u0026gt; -net0 \u003cspan class=\"nv\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eeth0,bridge\u003cspan class=\"o\"\u003e=\u003c/span\u003evmbr0,tag\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026lt;VLAN_ID\u0026gt;,ip\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026lt;Pi-hole_IP\u0026gt;/24,gw\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u0026lt;VLAN_Gateway\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"Pi-hole DNS Migration to Production VLAN"},{"content":"Remote SDN Recovery \u0026amp; VLAN Isolation via VPN \u0026amp; Shell Access Overview In this project, I successfully re-established full access to my network management stack (Omada Controller, Proxmox GUI, and LXC containers) after losing access due to misconfigured VLAN trunking. The recovery was performed entirely off-site, using only a mobile device connected via an OpenVPN tunnel.\nBackground I transitioned my home lab management network to VLAN 99 to achieve full traffic isolation. In the process of re-tagging Proxmox and LXC container traffic and reconfiguring Cisco switch trunk ports, I lost access to the Omada Controller and Proxmox GUI. With no local access to the console, I needed a remote solution.\nObjective Regain access to VLAN 99 (management) Restore Omada Controller GUI and Proxmox Web GUI Ensure all traffic on management interfaces is VLAN 99 tagged Tools Used Proxmox VE 8.3 pfSense (OpenVPN Server \u0026amp; Firewall) TP-Link Omada Controller (LXC) SSH (mobile terminal access) OpenVPN (Client-to-Site) VLAN-aware Linux bridges (vmbr1) Cisco Catalyst switch (trunk config) Steps Performed Connected to VPN Tunnel 1 (LAN access)\nUsed an existing OpenVPN client-to-site tunnel connected to the LAN network Leveraged this connection as a starting point Established VPN Tunnel 2 (MGMT access)\nConfigured a new OpenVPN tunnel to reach VLAN 99 Verified routing and DNS from VPN client to MGMT subnet Accessed Proxmox Shell Remotely\nUsed SSH to access the Proxmox server shell Reviewed \u0026amp; Edited /etc/network/interfaces\nCreated a Linux Bridge vmbr1 on enp1s0 Configured vmbr1 as VLAN-aware with a VLAN 99 subinterface Reconfigured Omada Controller LXC\nSet static IP from VLAN 99 Edited /etc/pve/lxc/\u0026lt;vmid\u0026gt;.conf to tag interface correctly Updated pfSense Firewall Rules\nAllowed VPN access to Proxmox, Omada Controller, and LXCs Verified GUI access over VPN Safely Restarted Proxmox Networking Stack\nReloaded network stack without reboot to preserve SSH session Verified LXC \u0026amp; Controller Connectivity\nConfirmed restored access to Omada Controller \u0026amp; Proxmox GUI Checked VLAN 99 trunking on Cisco switch Secured VLAN 99\nBlocked all external access to VLAN 99 Allowed only OpenVPN tunnel access Tested Full Remote Management Over VPN\nOutcome Full recovery of Proxmox and Omada Controller Management services isolated to VLAN 99 VLAN trunking corrected on switch Secure remote access via OpenVPN tunnel All executed off-site using a mobile SSH client Screenshots \u0026amp; CLI Snippets (To be added) Network configuration diagrams VLAN trunking layout (Cisco Catalyst Switch) show vlan brief 1 default active 14 GUEST active 21 PRODUCTION active 99 MANAGEMENT active 666 BLACKHOLE active show interfaces trunk Port Mode Encapsulation Status Native vlan Fa0/7 on 802.1q trunking 666 Fa0/8 on 802.1q trunking 666 Gi0/2 on 802.1q trunking 666 Port Vlans allowed on trunk Fa0/7 1,14,21,99,666 Fa0/8 1,14,21,99,666 Gi0/2 1,14,21,99,666 Port Vlans allowed and active in management domain Fa0/7 1,14,21,99,666 Fa0/8 1,14,21,99,666 Gi0/2 1,14,21,99,666 Proxmox Interfaces cat /etc/network/interfaces auto lo iface lo inet loopback iface enp4s0 inet manual #Proxmox Management iface enp1s0 inet manual #MGMT Bridge Link iface enx60189502f716 inet manual iface enp2s0 inet manual #PfSense LAN iface enp3s0 inet manual #PfSense WAN auto vmbr0 iface vmbr0 inet static address fallback.management.ip/24 bridge-ports enp4s0 bridge-stp off bridge-fd 0 bridge-vlan-aware yes bridge-vids 2-4094 dns-nameservers 1.1.1.1 8.8.8.8 #Native Proxmox Management auto vmbr1 iface vmbr1 inet manual bridge-ports enp1s0 bridge-stp off bridge-fd 0 bridge-vlan-aware yes bridge-vids 2-4094 #MGMT Bridge auto vmbr1.99 iface vmbr1.99 inet static address management.ip/24 gateway management.gateway.ip #Proxmox MGMT 99 source /etc/network/interfaces.d/* Omada Controller Network Config cat /etc/network/interfaces #TP-Link Omada Controller (Ubuntu 22.04) arch: amd64 cores: 1 features: nesting=1 hostname: omada memory: 2304 net0:name=eth0,bridge=vmbr1,firewall=1,gw=management.gateway.ip,hwaddr=macaddress,ip=management.ip/24,tag=99,type=veth onboot: 1 ostype: ubuntu rootfs: local-lvm:vm-200-disk-0,size=8G startup: order=3,up=30,down=120 swap: 512 unprivileged: 1 openvpn status Lessons Learned Always test VLAN changes with fallback access Proxmox shell is essential for remote recovery OpenVPN enables secure remote SDN administration Avoid dual gateway configurations on bridges Future Improvements Add fallback management IP on separate VLAN Setup out-of-band access (serial/IPMI) Automate Proxmox network config backups Resume Bullet Performed live remote SDN infrastructure recovery using OpenVPN and SSH from a mobile device; reconfigured VLAN-tagged Proxmox bridges, updated pfSense firewall rules, and restored access to critical network services including Omada Controller and LXC containers on an isolated management VLAN. ","permalink":"https://blog.tillynet.com/my-home-lab-journey/remote-sdn-recovery-vlan-isolation-via-vpn-shell-access/","summary":"\u003ch2 id=\"remote-sdn-recovery--vlan-isolation-via-vpn--shell-access\"\u003eRemote SDN Recovery \u0026amp; VLAN Isolation via VPN \u0026amp; Shell Access\u003c/h2\u003e\n\u003ch3 id=\"overview\"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eIn this project, I successfully re-established full access to my network management stack (Omada Controller, Proxmox GUI, and LXC containers) after losing access due to misconfigured VLAN trunking. The recovery was performed entirely \u003cstrong\u003eoff-site\u003c/strong\u003e, using only a mobile device connected via an \u003cstrong\u003eOpenVPN tunnel\u003c/strong\u003e.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"background\"\u003eBackground\u003c/h3\u003e\n\u003cp\u003eI transitioned my home lab management network to VLAN 99 to achieve full traffic isolation. In the process of re-tagging Proxmox and LXC container traffic and reconfiguring Cisco switch trunk ports, I lost access to the Omada Controller and Proxmox GUI. With no local access to the console, I needed a remote solution.\u003c/p\u003e","title":"Remote SDN Recovery \u0026 VLAN Isolation via VPN \u0026 Shell Access"},{"content":"02 - Migrating to a Dedicated Management VLAN (VLAN 99) This phase documents the migration of all core management infrastructure to an isolated VLAN (VLAN 99) for improved security, network segmentation, and long-term scalability. This included Proxmox GUI access, Omada Controller LXC, and strict firewall rules enforced via pfSense.\nGoals Remove critical services from default/native VLAN Assign a dedicated, isolated VLAN (VLAN 99) for: Proxmox management GUI Omada Controller (LXC) Trunk management VLAN through switch to Proxmox Implement firewall rules to allow remote admin access only Preserve service availability during transition Pre-Migration Topology Component Network VLAN Interface Description Proxmox Host LAN VLAN 1 vmbr0 Static IP via native VLAN Omada Controller LAN VLAN 1 vmbr0 LXC container, web GUI on port 8043 Pi-hole LAN VLAN 1 vmbr0 DNS LXC VPN Tunnel LAN VLAN 1 pfSense Remote client-to-site access Post-Migration Topology Component Network VLAN Interface Description Proxmox Host Management VLAN 99 vmbr1.99 Tagged IP for GUI access via vmbr1 Omada Controller Management VLAN 99 vmbr1 (tagged) LXC container with VLAN tag 99 Pi-hole LAN VLAN 1 vmbr0 LXC container Trunk Port (Switch) Trunked Port 1,99,14 enp1s0 Connected to VLAN-aware bridge vmbr1 VPN Tunnel Routed to MGMT VLAN 99 pfSense Allows external admin access to VLAN 99 Migration Steps 1. Create VLAN 99 in pfSense Interfaces \u0026gt; Assignments \u0026gt; VLANs Created VLAN 99 on the LAN parent interface Assigned it as a new interface and renamed it to MGMT Enabled the interface and set a static IP (management subnet) 2. Configure Proxmox Bridge for VLAN Tagging Created a new VLAN-aware bridge and subinterface in /etc/network/interfaces:\nauto vmbr1 iface vmbr1 inet manual bridge-ports enp1s0 bridge-stp off bridge-fd 0 bridge-vlan-aware yes bridge-vids 2-4094 auto vmbr1.99 iface vmbr1.99 inet static address \u0026lt;management_ip\u0026gt;/24 gateway \u0026lt;management_gateway\u0026gt; ","permalink":"https://blog.tillynet.com/my-home-lab-journey/creating-network-management-isolation/","summary":"\u003ch1 id=\"02---migrating-to-a-dedicated-management-vlan-vlan-99\"\u003e02 - Migrating to a Dedicated Management VLAN (VLAN 99)\u003c/h1\u003e\n\u003cp\u003eThis phase documents the migration of all core management infrastructure to an isolated VLAN (VLAN 99) for improved security, network segmentation, and long-term scalability. This included Proxmox GUI access, Omada Controller LXC, and strict firewall rules enforced via pfSense.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"goals\"\u003eGoals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRemove critical services from default/native VLAN\u003c/li\u003e\n\u003cli\u003eAssign a dedicated, isolated VLAN (VLAN 99) for:\n\u003cul\u003e\n\u003cli\u003eProxmox management GUI\u003c/li\u003e\n\u003cli\u003eOmada Controller (LXC)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTrunk management VLAN through switch to Proxmox\u003c/li\u003e\n\u003cli\u003eImplement firewall rules to allow remote admin access only\u003c/li\u003e\n\u003cli\u003ePreserve service availability during transition\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"pre-migration-topology\"\u003ePre-Migration Topology\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eComponent\u003c/th\u003e\n          \u003cth\u003eNetwork\u003c/th\u003e\n          \u003cth\u003eVLAN\u003c/th\u003e\n          \u003cth\u003eInterface\u003c/th\u003e\n          \u003cth\u003eDescription\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eProxmox Host\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLAN\u003c/td\u003e\n          \u003ctd\u003eVLAN 1\u003c/td\u003e\n          \u003ctd\u003evmbr0\u003c/td\u003e\n          \u003ctd\u003eStatic IP via native VLAN\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eOmada Controller\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLAN\u003c/td\u003e\n          \u003ctd\u003eVLAN 1\u003c/td\u003e\n          \u003ctd\u003evmbr0\u003c/td\u003e\n          \u003ctd\u003eLXC container, web GUI on port 8043\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003ePi-hole\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLAN\u003c/td\u003e\n          \u003ctd\u003eVLAN 1\u003c/td\u003e\n          \u003ctd\u003evmbr0\u003c/td\u003e\n          \u003ctd\u003eDNS LXC\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eVPN Tunnel\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLAN\u003c/td\u003e\n          \u003ctd\u003eVLAN 1\u003c/td\u003e\n          \u003ctd\u003epfSense\u003c/td\u003e\n          \u003ctd\u003eRemote client-to-site access\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"post-migration-topology\"\u003ePost-Migration Topology\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eComponent\u003c/th\u003e\n          \u003cth\u003eNetwork\u003c/th\u003e\n          \u003cth\u003eVLAN\u003c/th\u003e\n          \u003cth\u003eInterface\u003c/th\u003e\n          \u003cth\u003eDescription\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eProxmox Host\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eManagement\u003c/td\u003e\n          \u003ctd\u003eVLAN 99\u003c/td\u003e\n          \u003ctd\u003evmbr1.99\u003c/td\u003e\n          \u003ctd\u003eTagged IP for GUI access via \u003ccode\u003evmbr1\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eOmada Controller\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eManagement\u003c/td\u003e\n          \u003ctd\u003eVLAN 99\u003c/td\u003e\n          \u003ctd\u003evmbr1 (tagged)\u003c/td\u003e\n          \u003ctd\u003eLXC container with VLAN tag 99\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003ePi-hole\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLAN\u003c/td\u003e\n          \u003ctd\u003eVLAN 1\u003c/td\u003e\n          \u003ctd\u003evmbr0\u003c/td\u003e\n          \u003ctd\u003eLXC container\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eTrunk Port (Switch)\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eTrunked Port\u003c/td\u003e\n          \u003ctd\u003e1,99,14\u003c/td\u003e\n          \u003ctd\u003eenp1s0\u003c/td\u003e\n          \u003ctd\u003eConnected to VLAN-aware bridge \u003ccode\u003evmbr1\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eVPN Tunnel\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eRouted to MGMT\u003c/td\u003e\n          \u003ctd\u003eVLAN 99\u003c/td\u003e\n          \u003ctd\u003epfSense\u003c/td\u003e\n          \u003ctd\u003eAllows external admin access to VLAN 99\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"migration-steps\"\u003eMigration Steps\u003c/h2\u003e\n\u003ch3 id=\"1-create-vlan-99-in-pfsense\"\u003e1. Create VLAN 99 in pfSense\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInterfaces \u0026gt; Assignments \u0026gt; VLANs\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eCreated VLAN 99 on the LAN parent interface\u003c/li\u003e\n\u003cli\u003eAssigned it as a new interface and renamed it to \u003ccode\u003eMGMT\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eEnabled the interface and set a static IP (management subnet)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-configure-proxmox-bridge-for-vlan-tagging\"\u003e2. Configure Proxmox Bridge for VLAN Tagging\u003c/h3\u003e\n\u003cp\u003eCreated a new VLAN-aware bridge and subinterface in \u003ccode\u003e/etc/network/interfaces\u003c/code\u003e:\u003c/p\u003e","title":"Creating Network Management Isolation"},{"content":"HomeLab: Initial Network Setup This project documents the first working phase of my home network infrastructure built on top of Proxmox, using pfSense as a virtual firewall/router and LXC containers to host internal services. The design lays the foundation for a scalable, secure, and isolated home lab environment.\nOverview Hypervisor: Proxmox VE running on Protectli Vault VP2420 (Intel J6412, 4 NICs) Router/Firewall: pfSense VM Internal Services: Pi-hole (LXC) – local recursive DNS + ad-blocking Omada Controller (LXC) – TP-Link AP management LAN Devices: Proxmox host, personal workstation, AP, switch Guest Devices: IoT \u0026amp; roommate devices on isolated VLAN 14 Infrastructure at a Glance Component Description pfSense VM with two PCI-passthrough NICs (WAN + LAN) vmbr0 Bridge for LAN (Proxmox + LXCs) vmbr1 Reserved for future VLAN tagging (e.g., mgmt) Pi-hole LXC container for DNS (on LAN) Omada Ctrl LXC container managing TP-Link EAP670 AP Cisco Switch Access switch trunking VLANs to Proxmox/AP Guest VLAN 14 WiFi-only VLAN for roommate \u0026amp; IoT devices Setup Timeline Phase 1 – Core Infrastructure Flashed Proxmox onto Protectli Vault Created pfSense VM with 2 passthrough NICs: WAN: connected to ISP modem LAN: connected to Cisco switch (trunk-ready) Configured vmbr0 as LAN bridge in Proxmox Gave Proxmox host static IP on the LAN network Phase 2 – Internal Services Provisioned LXC container for Pi-hole Static IP assigned Configured upstream DNS servers (e.g., Cloudflare) Provisioned LXC container for Omada Controller Used to manage TP-Link EAP670 AP Served on LAN via Omada web GUI (port 8043) Phase 3 – Wireless \u0026amp; Guest VLAN Set up VLAN 14 in pfSense (Guest Network) Trunked VLANs through switch port to Omada AP Created isolated wireless SSID mapped to VLAN 14 Configured firewall rules in pfSense: Guests can access WAN only Blocked access to LAN and Pi-hole Verified DHCP lease and internet access for guests Observed isolated traffic from personal network Security Practices Created distinct VLANs for guest vs personal network Isolated Pi-hole to LAN access only Disabled inter-VLAN routing from Guest → LAN Assigned firewall rules by interface in pfSense Reserved management services for trusted VLAN only To-Do / Next Steps Create VLAN 99 for network management Move Proxmox GUI and Omada Controller to VLAN 99 Add remote access via OpenVPN (completed later) Diagram full topology and backup strategy Network Diagram Lessons Learned Always reserve a static fallback IP for management pfSense is extremely powerful when paired with LXC containers VLANs and firewall rules are critical to proper isolation Omada Controller offers enterprise-like wireless management Resume Bullet (from this phase) Deployed full virtual home network lab with pfSense firewall, VLAN isolation, and internal services (DNS, WiFi controller) using Proxmox and LXC containers; implemented guest network segregation and trunked VLANs across Cisco infrastructure. ","permalink":"https://blog.tillynet.com/my-home-lab-journey/the-big-bang-how-it-all-began/","summary":"\u003ch1 id=\"homelab-initial-network-setup\"\u003eHomeLab: Initial Network Setup\u003c/h1\u003e\n\u003cp\u003eThis project documents the first working phase of my home network infrastructure built on top of Proxmox, using pfSense as a virtual firewall/router and LXC containers to host internal services. The design lays the foundation for a scalable, secure, and isolated home lab environment.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHypervisor:\u003c/strong\u003e Proxmox VE running on Protectli Vault VP2420 (Intel J6412, 4 NICs)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRouter/Firewall:\u003c/strong\u003e pfSense VM\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInternal Services:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003ePi-hole (LXC) – local recursive DNS + ad-blocking\u003c/li\u003e\n\u003cli\u003eOmada Controller (LXC) – TP-Link AP management\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLAN Devices:\u003c/strong\u003e Proxmox host, personal workstation, AP, switch\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGuest Devices:\u003c/strong\u003e IoT \u0026amp; roommate devices on isolated VLAN 14\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"infrastructure-at-a-glance\"\u003eInfrastructure at a Glance\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eComponent\u003c/th\u003e\n          \u003cth\u003eDescription\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003epfSense\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eVM with two PCI-passthrough NICs (WAN + LAN)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003evmbr0\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eBridge for LAN (Proxmox + LXCs)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003evmbr1\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eReserved for future VLAN tagging (e.g., mgmt)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003ePi-hole\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLXC container for DNS (on LAN)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eOmada Ctrl\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eLXC container managing TP-Link EAP670 AP\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eCisco Switch\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eAccess switch trunking VLANs to Proxmox/AP\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eGuest VLAN 14\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003eWiFi-only VLAN for roommate \u0026amp; IoT devices\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch2 id=\"setup-timeline\"\u003eSetup Timeline\u003c/h2\u003e\n\u003ch3 id=\"phase-1--core-infrastructure\"\u003ePhase 1 – Core Infrastructure\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eFlashed Proxmox onto Protectli Vault\u003c/li\u003e\n\u003cli\u003eCreated pfSense VM with 2 passthrough NICs:\n\u003cul\u003e\n\u003cli\u003eWAN: connected to ISP modem\u003c/li\u003e\n\u003cli\u003eLAN: connected to Cisco switch (trunk-ready)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eConfigured \u003ccode\u003evmbr0\u003c/code\u003e as LAN bridge in Proxmox\u003c/li\u003e\n\u003cli\u003eGave Proxmox host static IP on the LAN network\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-2--internal-services\"\u003ePhase 2 – Internal Services\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eProvisioned LXC container for Pi-hole\n\u003cul\u003e\n\u003cli\u003eStatic IP assigned\u003c/li\u003e\n\u003cli\u003eConfigured upstream DNS servers (e.g., Cloudflare)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eProvisioned LXC container for Omada Controller\n\u003cul\u003e\n\u003cli\u003eUsed to manage TP-Link EAP670 AP\u003c/li\u003e\n\u003cli\u003eServed on LAN via Omada web GUI (port 8043)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"phase-3--wireless--guest-vlan\"\u003ePhase 3 – Wireless \u0026amp; Guest VLAN\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSet up VLAN 14 in pfSense (Guest Network)\u003c/li\u003e\n\u003cli\u003eTrunked VLANs through switch port to Omada AP\u003c/li\u003e\n\u003cli\u003eCreated isolated wireless SSID mapped to VLAN 14\u003c/li\u003e\n\u003cli\u003eConfigured firewall rules in pfSense:\n\u003cul\u003e\n\u003cli\u003eGuests can access WAN only\u003c/li\u003e\n\u003cli\u003eBlocked access to LAN and Pi-hole\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eVerified DHCP lease and internet access for guests\u003c/li\u003e\n\u003cli\u003eObserved isolated traffic from personal network\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"security-practices\"\u003eSecurity Practices\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCreated distinct VLANs for guest vs personal network\u003c/li\u003e\n\u003cli\u003eIsolated Pi-hole to LAN access only\u003c/li\u003e\n\u003cli\u003eDisabled inter-VLAN routing from Guest → LAN\u003c/li\u003e\n\u003cli\u003eAssigned firewall rules by interface in pfSense\u003c/li\u003e\n\u003cli\u003eReserved management services for trusted VLAN only\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"to-do--next-steps\"\u003eTo-Do / Next Steps\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCreate VLAN 99 for network management\u003c/li\u003e\n\u003cli\u003eMove Proxmox GUI and Omada Controller to VLAN 99\u003c/li\u003e\n\u003cli\u003eAdd remote access via OpenVPN (completed later)\u003c/li\u003e\n\u003cli\u003eDiagram full topology and backup strategy\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"network-diagram\"\u003eNetwork Diagram\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Image\" loading=\"lazy\" src=\"/images/TillyNet_OG.drawio.png\"\u003e\u003c/p\u003e","title":"The Big Bang (How it All Began)"}]